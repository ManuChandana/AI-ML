{"cells":[{"cell_type":"markdown","metadata":{"id":"OPEUtRhaPvuH"},"source":[" SVM for Character Recognition"]},{"cell_type":"markdown","metadata":{"id":"Rr94-EfrPvul"},"source":["**Demonstration of SVM and use for character recognition task.**"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ne7dnJ7fPvuo","executionInfo":{"status":"ok","timestamp":1731213247897,"user_tz":-330,"elapsed":450,"user":{"displayName":"Sai Praveen Chinta","userId":"00436975700721668619"}},"outputId":"7223a387-1221-4a3c-9695-1a74e68cf089"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1797, 64)"]},"metadata":{},"execution_count":41}],"source":["from sklearn import datasets\n","from sklearn.model_selection import train_test_split\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score, classification_report\n","from sklearn.preprocessing import StandardScaler\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","df = datasets.load_digits()\n","df.data.shape"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"KX-CrZ0OPvu4","executionInfo":{"status":"ok","timestamp":1731212796354,"user_tz":-330,"elapsed":9,"user":{"displayName":"Sai Praveen Chinta","userId":"00436975700721668619"}}},"outputs":[],"source":["# obtain Train data and Train output\n","X = df.data  # Each image is flattened to 64 features (8x8 images here for demonstration)\n","y = df.target"]},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ooUFtk19Pvu7","executionInfo":{"status":"ok","timestamp":1731212796354,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sai Praveen Chinta","userId":"00436975700721668619"}},"outputId":"98625273-baba-4067-befc-92e2de902520"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],\n","       [ 0.,  0.,  0., ..., 10.,  0.,  0.],\n","       [ 0.,  0.,  0., ..., 16.,  9.,  0.],\n","       ...,\n","       [ 0.,  0.,  1., ...,  6.,  0.,  0.],\n","       [ 0.,  0.,  2., ..., 12.,  0.,  0.],\n","       [ 0.,  0., 10., ..., 12.,  1.,  0.]])"]},"metadata":{},"execution_count":33}],"source":["X"]},{"cell_type":"code","source":["y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vPqMvGseRes1","executionInfo":{"status":"ok","timestamp":1731212796355,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sai Praveen Chinta","userId":"00436975700721668619"}},"outputId":"fff98ce2-5152-4d09-d930-51dd9bbcba90"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2, ..., 8, 9, 8])"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","execution_count":35,"metadata":{"id":"chbAJwmAPvu-","executionInfo":{"status":"ok","timestamp":1731212796355,"user_tz":-330,"elapsed":6,"user":{"displayName":"Sai Praveen Chinta","userId":"00436975700721668619"}}},"outputs":[],"source":["# Preprocess: Scale data\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)"]},{"cell_type":"code","execution_count":36,"metadata":{"id":"gfCzN9e7PvvB","executionInfo":{"status":"ok","timestamp":1731212796355,"user_tz":-330,"elapsed":5,"user":{"displayName":"Sai Praveen Chinta","userId":"00436975700721668619"}}},"outputs":[],"source":["X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2)"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"CxlywdrVPvvE","executionInfo":{"status":"ok","timestamp":1731212796355,"user_tz":-330,"elapsed":5,"user":{"displayName":"Sai Praveen Chinta","userId":"00436975700721668619"}}},"outputs":[],"source":["# Initialize SVM with RBF kernel\n","svm_model = SVC(kernel='rbf', gamma=0.01, C=1)"]},{"cell_type":"code","source":["svm_model.fit(X_train, y_train)\n","y_pred = svm_model.predict(X_test)"],"metadata":{"id":"8crMojbFShKj","executionInfo":{"status":"ok","timestamp":1731212796927,"user_tz":-330,"elapsed":576,"user":{"displayName":"Sai Praveen Chinta","userId":"00436975700721668619"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["accuracy = accuracy_score(y_test, y_pred)\n","classification_rep = classification_report(y_test, y_ped)"],"metadata":{"id":"AfZee-oESylU","executionInfo":{"status":"ok","timestamp":1731212796929,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sai Praveen Chinta","userId":"00436975700721668619"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["print(\"Accuracy: \", accuracy)\n","print(\"Classification Report:\\n\", classification_rep)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sIb3Z1yHUXnD","executionInfo":{"status":"ok","timestamp":1731212796929,"user_tz":-330,"elapsed":6,"user":{"displayName":"Sai Praveen Chinta","userId":"00436975700721668619"}},"outputId":"18c02bc1-e66b-44e3-8d0d-4fce66e50e8f"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy:  0.975\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00        33\n","           1       0.97      1.00      0.99        35\n","           2       1.00      0.98      0.99        42\n","           3       1.00      1.00      1.00        33\n","           4       0.98      1.00      0.99        41\n","           5       0.95      0.93      0.94        41\n","           6       0.97      1.00      0.99        36\n","           7       0.97      1.00      0.99        34\n","           8       0.97      0.97      0.97        32\n","           9       0.94      0.88      0.91        33\n","\n","    accuracy                           0.97       360\n","   macro avg       0.97      0.98      0.97       360\n","weighted avg       0.97      0.97      0.97       360\n","\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(10, 5))\n","for i, index in enumerate(np.random.choice(len(X_test), 10, replace=False)):\n","    plt.subplot(2, 5, i + 1)\n","    plt.imshow(X_test[index].reshape(8, 8), cmap='gray')\n","    plt.title(f\"Pred: {y_pred[index]}\")\n","    plt.axis('off')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":402},"id":"qLtTKbfHWUt-","executionInfo":{"status":"ok","timestamp":1731213254688,"user_tz":-330,"elapsed":1091,"user":{"displayName":"Sai Praveen Chinta","userId":"00436975700721668619"}},"outputId":"c5941703-0f5e-49ed-e495-4ed7e589310b"},"execution_count":42,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 10 Axes>"],"image/png":"\n"},"metadata":{}}]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.1"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":0}